{"version":3,"sources":["Form.js","Story.js","Madlibs.js","App.js","serviceWorker.js","index.js"],"names":["Form","_ref","fillInTheBlanks","_useState","useState","noun","noun2","adjective","color","_useState2","_slicedToArray","formData","setFormData","handleChange","event","_event$target","target","name","value","_objectSpread","_defineProperty","_jsx","children","_jsxs","onSubmit","evt","preventDefault","id","uuid","htmlFor","onChange","type","Story","props","console","log","Madlibs","words","setWords","className","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kQAmEeA,EA/DF,SAAHC,GAA6B,IAAvBC,EAAeD,EAAfC,gBAGdC,EAAgCC,mBAFV,CAAEC,KAAM,GAAIC,MAAO,GAAIC,UAAW,GAAIC,MAAO,KAEZC,EAAAC,YAAAP,EAAA,GAAhDQ,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GACtBI,EAAe,SAACC,GACpB,IAAAC,EAAwBD,EAAME,OAAtBC,EAAIF,EAAJE,KAAMC,EAAKH,EAALG,MACdN,GAAY,SAACD,GAAQ,OAAAQ,wBAAA,GAChBR,GAAQ,GAAAS,YAAA,GACVH,EAAOC,GAAK,GAEjB,EAMA,OACEG,cAAA,OAAAC,SACEC,eAAA,QAAMC,SAPU,SAACC,GACnBA,EAAIC,iBACJxB,EAAeiB,wBAAC,CAAC,EAAIR,GAAQ,IAAEgB,GAAIC,SACnChB,EAAY,CAAEP,KAAM,GAAIC,MAAO,GAAIC,UAAW,GAAIC,MAAO,IAC3D,EAGgCc,SAAA,CAC1BC,eAAA,OAAAD,SAAA,CACAD,cAAA,SAAOQ,QAAQ,OAAMP,SAAC,WACtBD,cAAA,SACES,SAAUjB,EACVkB,KAAK,OACLd,KAAK,OACLC,MAAOP,EAASN,UAGlBkB,eAAA,OAAAD,SAAA,CACED,cAAA,SAAOQ,QAAQ,QAAOP,SAAC,WACzBD,cAAA,SACES,SAAUjB,EACVkB,KAAK,OACLd,KAAK,QACLC,MAAOP,EAASL,WAGlBiB,eAAA,OAAAD,SAAA,CACED,cAAA,SAAOQ,QAAQ,YAAWP,SAAC,gBAC7BD,cAAA,SACES,SAAUjB,EACVkB,KAAK,OACLd,KAAK,YACLC,MAAOP,EAASJ,eAGlBgB,eAAA,OAAAD,SAAA,CACED,cAAA,SAAOQ,QAAQ,QAAOP,SAAC,YACzBD,cAAA,SACES,SAAUjB,EACVkB,KAAK,OACLd,KAAK,QACLC,MAAOP,EAASH,WAGlBa,cAAA,OAAAC,SACAD,cAAA,UAAQM,GAAG,kBAAiBL,SAAC,yBAKrC,EC/CeU,G,MAfD,SAACC,GACbC,QAAQC,IAAIF,EAAMA,MAAM5B,MACxB,IAAMA,EAAO4B,EAAMA,MAAM5B,KACnBC,EAAQ2B,EAAMA,MAAM3B,MACpBC,EAAY0B,EAAMA,MAAM1B,UACxBC,EAAQyB,EAAMA,MAAMzB,MAC1B,OACEa,cAAA,OAAAC,SACEC,eAAA,KAAAD,SAAA,CAAG,eACYd,EAAM,IAAEH,EAAK,iBAAeE,EAAU,IAAED,EAAM,QAInE,GCUe8B,EArBC,WACd,IAAAjC,EAA0BC,qBAAUK,EAAAC,YAAAP,EAAA,GAA7BkC,EAAK5B,EAAA,GAAE6B,EAAQ7B,EAAA,GAMtB,OACEc,eAAA,OAAKgB,UAAU,SAAQjB,SAAA,CACrBD,cAAA,MAAAC,SAAI,YACHe,EACCd,eAAA,OAAAD,SAAA,CACED,cAACW,EAAK,CAACC,MAAOI,IAAS,IAAChB,cAAA,UAAQmB,QAP1B,WAAH,OAASF,EAAS,KAAM,EAOoBhB,SAAC,kBAGlDD,cAACrB,EAAI,CAACE,gBAbA,SAACA,GACXoC,EAASpC,EACX,MAeF,ECXeuC,MARf,WACE,OACEpB,cAAA,OAAKkB,UAAU,MAAKjB,SAClBD,cAACe,EAAO,KAGd,ECCoBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO3B,cAACoB,EAAG,IAAKQ,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,YACf,IACCC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,QACtB,G","file":"static/js/main.bf5c1d88.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./Form.css\";\nimport uuid from \"uuid/v1\";\n\nconst Form = ({ fillInTheBlanks }) => {\n  const INITIAL_STATE = { noun: \"\", noun2: \"\", adjective: \"\", color: \"\" };\n\n  const [formData, setFormData] = useState(INITIAL_STATE);\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormData((formData) => ({\n      ...formData,\n      [name]: value,\n    }));\n  };\n  const gatherInput = (evt) => {\n    evt.preventDefault();\n    fillInTheBlanks({ ...formData, id: uuid() });\n    setFormData({ noun: \"\", noun2: \"\", adjective: \"\", color: \"\" });\n  };\n  return (\n    <div>\n      <form onSubmit={gatherInput}>\n        <div>\n        <label htmlFor=\"noun\">Noun: </label>\n        <input\n          onChange={handleChange}\n          type=\"text\"\n          name=\"noun\"\n          value={formData.noun}\n        />\n        </div>\n        <div>\n          <label htmlFor=\"noun2\">Noun: </label>\n        <input\n          onChange={handleChange}\n          type=\"text\"\n          name=\"noun2\"\n          value={formData.noun2}\n        />\n        </div>\n        <div>\n          <label htmlFor=\"adjective\">Adjective: </label>\n        <input\n          onChange={handleChange}\n          type=\"text\"\n          name=\"adjective\"\n          value={formData.adjective}\n        />\n        </div>\n        <div>\n          <label htmlFor=\"color\">Color: </label>\n        <input\n          onChange={handleChange}\n          type=\"text\"\n          name=\"color\"\n          value={formData.color}\n        />\n        </div>\n        <div>\n        <button id=\"newMadlibButton\">Submit Madlib!</button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default Form;\n","import React from \"react\";\nimport \"./Story.css\";\n\nconst Story = (props) => {\n  console.log(props.props.noun);\n  const noun = props.props.noun;\n  const noun2 = props.props.noun2;\n  const adjective = props.props.adjective;\n  const color = props.props.color;\n  return (\n    <div>\n      <p>\n        There was a {color} {noun} that loved a {adjective} {noun2}.\n      </p>\n    </div>\n  );\n};\n\nexport default Story;\n","import React, { useState } from \"react\";\nimport \"./Madlibs.css\"\nimport Form from \"./Form\";\nimport Story from \"./Story\";\n\nconst Madlibs = () => {\n  const [words, setWords] = useState();\n  const add = (fillInTheBlanks) => {\n    setWords(fillInTheBlanks);\n  };\n  const reset = () => setWords(null);\n\n  return (\n    <div className=\"center\">\n      <h1>Madlibs</h1>\n      {words ? (\n        <div>\n          <Story props={words} /> <button onClick={reset}>New Madlib</button>\n        </div>\n      ) : (\n        <Form fillInTheBlanks={add} />\n      )}\n    </div>\n  );\n};\n\nexport default Madlibs;\n","import React from \"react\";\nimport Madlibs from \"./Madlibs\";\n\n/** Simple app that just shows the Madlibs game. */\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Madlibs />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}